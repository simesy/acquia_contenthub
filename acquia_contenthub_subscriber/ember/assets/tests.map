{"version":3,"sources":["ch-ember-app/tests/adapters/application.jshint.js","ch-ember-app/tests/app.jshint.js","ch-ember-app/tests/components/discovery-page.jshint.js","ch-ember-app/tests/helpers/destroy-app.js","ch-ember-app/tests/helpers/destroy-app.jshint.js","ch-ember-app/tests/helpers/ember-basic-dropdown.js","ch-ember-app/tests/helpers/ember-power-select.js","ch-ember-app/tests/helpers/module-for-acceptance.js","ch-ember-app/tests/helpers/module-for-acceptance.jshint.js","ch-ember-app/tests/helpers/resolver.js","ch-ember-app/tests/helpers/resolver.jshint.js","ch-ember-app/tests/helpers/start-app.js","ch-ember-app/tests/helpers/start-app.jshint.js","ch-ember-app/tests/integration/components/discovery-page-test.js","ch-ember-app/tests/integration/components/discovery-page-test.jshint.js","ch-ember-app/tests/models/client.jshint.js","ch-ember-app/tests/models/entity.jshint.js","ch-ember-app/tests/models/search-result.jshint.js","ch-ember-app/tests/models/tag.jshint.js","ch-ember-app/tests/resolver.jshint.js","ch-ember-app/tests/router.jshint.js","ch-ember-app/tests/routes/application.jshint.js","ch-ember-app/tests/serializers/client.jshint.js","ch-ember-app/tests/serializers/entity.jshint.js","ch-ember-app/tests/serializers/tag.jshint.js","ch-ember-app/tests/test-helper.js","ch-ember-app/tests/test-helper.jshint.js","ch-ember-app/tests/unit/adapters/application-test.js","ch-ember-app/tests/unit/adapters/application-test.jshint.js","ch-ember-app/tests/unit/controllers/entity-test.js","ch-ember-app/tests/unit/controllers/entity-test.jshint.js","ch-ember-app/tests/unit/mixins/hmac-adapter-mixin-test.js","ch-ember-app/tests/unit/mixins/hmac-adapter-mixin-test.jshint.js","ch-ember-app/tests/unit/mixins/hmac-test.js","ch-ember-app/tests/unit/mixins/hmac-test.jshint.js","ch-ember-app/tests/unit/mixins/test-test.js","ch-ember-app/tests/unit/mixins/test-test.jshint.js","ch-ember-app/tests/unit/models/client-test.js","ch-ember-app/tests/unit/models/client-test.jshint.js","ch-ember-app/tests/unit/models/entity-test.js","ch-ember-app/tests/unit/models/entity-test.jshint.js","ch-ember-app/tests/unit/models/search-result-test.js","ch-ember-app/tests/unit/models/search-result-test.jshint.js","ch-ember-app/tests/unit/models/tag-test.js","ch-ember-app/tests/unit/models/tag-test.jshint.js","ch-ember-app/tests/unit/routes/client-test.js","ch-ember-app/tests/unit/routes/client-test.jshint.js","ch-ember-app/tests/unit/serializers/client-test.js","ch-ember-app/tests/unit/serializers/client-test.jshint.js","ch-ember-app/tests/unit/serializers/entity-test.js","ch-ember-app/tests/unit/serializers/entity-test.jshint.js","ch-ember-app/tests/unit/serializers/tag-test.js","ch-ember-app/tests/unit/serializers/tag-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('ch-ember-app/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/components/discovery-page.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/discovery-page.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/discovery-page.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('ch-ember-app/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/helpers/ember-basic-dropdown', ['exports', 'ember', 'ember-runloop'], function (exports, _ember, _emberRunloop) {\n  exports.nativeClick = nativeClick;\n  exports.clickTrigger = clickTrigger;\n  exports.tapTrigger = tapTrigger;\n  exports.fireKeydown = fireKeydown;\n\n  // integration helpers\n  function focus(el) {\n    if (!el) {\n      return;\n    }\n    var $el = jQuery(el);\n    if ($el.is(':input, [contenteditable=true]')) {\n      var type = $el.prop('type');\n      if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n        (0, _emberRunloop['default'])(null, function () {\n          // Firefox does not trigger the `focusin` event if the window\n          // does not have focus. If the document doesn't have focus just\n          // use trigger('focusin') instead.\n\n          if (!document.hasFocus || document.hasFocus()) {\n            el.focus();\n          } else {\n            $el.trigger('focusin');\n          }\n        });\n      }\n    }\n  }\n\n  function nativeClick(selector) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var mousedown = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n    var mouseup = new window.Event('mouseup', { bubbles: true, cancelable: true, view: window });\n    var click = new window.Event('click', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      mousedown[key] = options[key];\n      mouseup[key] = options[key];\n      click[key] = options[key];\n    });\n    var element = document.querySelector(selector);\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(mousedown);\n    });\n    focus(element);\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(mouseup);\n    });\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(click);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeClick(selector, options);\n  }\n\n  function tapTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchStartEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchStartEvent);\n    });\n    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchEndEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchEndEvent);\n    });\n  }\n\n  function fireKeydown(selector, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    $.extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(oEvent);\n    });\n  }\n\n  // acceptance helpers\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('clickDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      clickTrigger(cssPath, options);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('tapDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      tapTrigger(cssPath, options);\n    });\n  };\n});","define('ch-ember-app/tests/helpers/ember-power-select', ['exports', 'jquery', 'ember-runloop', 'ember-test'], function (exports, _jquery, _emberRunloop, _emberTest) {\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n\n  // Helpers for integration tests\n\n  function typeText(selector, text) {\n    var $selector = (0, _jquery['default'])((0, _jquery['default'])(selector).get(0)); // Only interact with the first result\n    $selector.val(text);\n    var event = document.createEvent('Events');\n    event.initEvent('input', true, true);\n    $selector[0].dispatchEvent(event);\n  }\n\n  function fireNativeMouseEvent(eventType, selectorOrDomElement) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    var target = undefined;\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n  }\n\n  function nativeMouseDown(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);\n  }\n\n  function nativeMouseUp(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    _jquery['default'].extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(text) {\n    (0, _emberRunloop['default'])(function () {\n      typeText('.ember-power-select-search-input, .ember-power-select-search input, .ember-power-select-trigger-multiple-input, input[type=\"search\"]', text);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeMouseDown(selector, options);\n  }\n\n  function nativeTouch(selectorOrDomElement) {\n    var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    var target = undefined;\n\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n    (0, _emberRunloop['default'])(function () {\n      event = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n      target.dispatchEvent(event);\n    });\n  }\n\n  function touchTrigger() {\n    var selector = '.ember-power-select-trigger';\n    nativeTouch(selector);\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    _emberTest['default'].registerAsyncHelper('selectChoose', function (app, cssPath, value) {\n      var $trigger = find(cssPath).find('.ember-power-select-trigger');\n      var contentId = '' + $trigger.attr('aria-controls');\n      var $content = find('#' + contentId);\n      // If the dropdown is closed, open it\n      if ($content.length === 0) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n\n      // Select the option with the given text\n      andThen(function () {\n        var potentialTargets = (0, _jquery['default'])('#' + contentId + ' .ember-power-select-option:contains(\"' + value + '\")').toArray();\n        var target = undefined;\n        if (potentialTargets.length > 1) {\n          target = potentialTargets.filter(function (t) {\n            return t.textContent.trim() === value;\n          })[0] || potentialTargets[0];\n        } else {\n          target = potentialTargets[0];\n        }\n        nativeMouseUp(target);\n      });\n    });\n\n    _emberTest['default'].registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var $trigger = find(cssPath).find('.ember-power-select-trigger');\n      var contentId = '' + $trigger.attr('aria-controls');\n      var isMultipleSelect = (0, _jquery['default'])(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var dropdownIsClosed = (0, _jquery['default'])('#' + contentId).length === 0;\n      if (dropdownIsClosed) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n      var isDefaultSingleSelect = (0, _jquery['default'])('.ember-power-select-search-input').length > 0;\n\n      if (isMultipleSelect) {\n        fillIn(cssPath + ' .ember-power-select-trigger-multiple-input', value);\n      } else if (isDefaultSingleSelect) {\n        fillIn('.ember-power-select-search-input', value);\n      } else {\n        // It's probably a customized version\n        var inputIsInTrigger = !!find(cssPath + ' .ember-power-select-trigger input[type=search]')[0];\n        if (inputIsInTrigger) {\n          fillIn(cssPath + ' .ember-power-select-trigger input[type=search]', value);\n        } else {\n          fillIn('#' + contentId + ' .ember-power-select-search-input[type=search]', 'input');\n        }\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to remove btn not found');\n        throw e;\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('clearSelected', function (app, cssPath) {\n      var elem = find(cssPath + ' .ember-power-select-clear-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to clear btn not found');\n        throw e;\n      }\n    });\n  };\n});","define('ch-ember-app/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ch-ember-app/tests/helpers/start-app', 'ch-ember-app/tests/helpers/destroy-app'], function (exports, _qunit, _chEmberAppTestsHelpersStartApp, _chEmberAppTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _chEmberAppTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _chEmberAppTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('ch-ember-app/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/helpers/resolver', ['exports', 'ch-ember-app/resolver', 'ch-ember-app/config/environment'], function (exports, _chEmberAppResolver, _chEmberAppConfigEnvironment) {\n\n  var resolver = _chEmberAppResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _chEmberAppConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _chEmberAppConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ch-ember-app/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/helpers/start-app', ['exports', 'ember', 'ch-ember-app/app', 'ch-ember-app/config/environment'], function (exports, _ember, _chEmberAppApp, _chEmberAppConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _chEmberAppConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _chEmberAppApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('ch-ember-app/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/integration/components/discovery-page-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('discovery-page', 'Integration | Component | discovery page', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'discovery-page', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'discovery-page', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ch-ember-app/tests/integration/components/discovery-page-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/discovery-page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/discovery-page-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/models/client.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/client.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/client.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/models/entity.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/entity.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/entity.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/models/search-result.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/search-result.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/search-result.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/models/tag.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/tag.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/tag.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/serializers/client.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/client.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/client.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/serializers/entity.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/entity.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/entity.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/serializers/tag.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/tag.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/tag.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/test-helper', ['exports', 'ch-ember-app/tests/helpers/resolver', 'ember-qunit'], function (exports, _chEmberAppTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_chEmberAppTestsHelpersResolver['default']);\n});","define('ch-ember-app/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ch-ember-app/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/controllers/entity-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:entity', 'Unit | Controller | entity', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ch-ember-app/tests/unit/controllers/entity-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/entity-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/entity-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/mixins/hmac-adapter-mixin-test', ['exports', 'ember', 'ch-ember-app/mixins/hmac-adapter-mixin', 'qunit'], function (exports, _ember, _chEmberAppMixinsHmacAdapterMixin, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | hmac adapter mixin');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var HmacAdapterMixinObject = _ember['default'].Object.extend(_chEmberAppMixinsHmacAdapterMixin['default']);\n    var subject = HmacAdapterMixinObject.create();\n    assert.ok(subject);\n  });\n});","define('ch-ember-app/tests/unit/mixins/hmac-adapter-mixin-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/hmac-adapter-mixin-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/hmac-adapter-mixin-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/mixins/hmac-test', ['exports', 'ember', 'ch-ember-app/mixins/hmac', 'qunit'], function (exports, _ember, _chEmberAppMixinsHmac, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | hmac');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var HmacObject = _ember['default'].Object.extend(_chEmberAppMixinsHmac['default']);\n    var subject = HmacObject.create();\n    assert.ok(subject);\n  });\n});","define('ch-ember-app/tests/unit/mixins/hmac-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/hmac-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/hmac-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/mixins/test-test', ['exports', 'ember', 'ch-ember-app/mixins/test', 'qunit'], function (exports, _ember, _chEmberAppMixinsTest, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | test');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var TestObject = _ember['default'].Object.extend(_chEmberAppMixinsTest['default']);\n    var subject = TestObject.create();\n    assert.ok(subject);\n  });\n});","define('ch-ember-app/tests/unit/mixins/test-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/test-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/test-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/models/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('client', 'Unit | Model | client', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ch-ember-app/tests/unit/models/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/client-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/models/entity-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('entity', 'Unit | Model | entity', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ch-ember-app/tests/unit/models/entity-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/entity-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/entity-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/models/search-result-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('search-result', 'Unit | Model | search result', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ch-ember-app/tests/unit/models/search-result-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/search-result-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/search-result-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/models/tag-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('tag', 'Unit | Model | tag', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ch-ember-app/tests/unit/models/tag-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/tag-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/tag-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/routes/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:client', 'Unit | Route | client', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ch-ember-app/tests/unit/routes/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/client-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/serializers/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('client', 'Unit | Serializer | client', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:client']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('ch-ember-app/tests/unit/serializers/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/client-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/serializers/entity-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('entity', 'Unit | Serializer | entity', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:entity']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('ch-ember-app/tests/unit/serializers/entity-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/entity-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/entity-test.js should pass jshint.');\n  });\n});","define('ch-ember-app/tests/unit/serializers/tag-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('tag', 'Unit | Serializer | tag', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:tag']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('ch-ember-app/tests/unit/serializers/tag-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/tag-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/tag-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('ch-ember-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}